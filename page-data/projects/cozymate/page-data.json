{"componentChunkName":"component---src-features-project-detail-index-tsx","path":"/projects/cozymate/","result":{"pageContext":{"slug":"cozymate","mainColor":"#68A4FF","icon":"/project/cozymate.png","title":"cozymate - 룸메이트 매칭 및 생활 종합 관리 폐쇄형 커뮤니티 서비스","description":"룸메이트와 함께 만드는 우리의 편안한 공간","date":"2024.06 ~ 진행 중","background":"University MakeUs Challenge 6th에서 진행한 데모데이 프로젝트로,\n대학교 기숙사의 룸메이트를 구하는 과정에서 룸메이트를 구하는 플랫폼이 따로 있지 않아 에브리타임과 같은 앱을 사용하고 있으나\n원하는 룸메이트를 구하는 것에 제약사항이 많고 룸메이트를 구했지만 라이프스타일이 맞지않아서\n정신적 스트레스가 쌓이는 대학생들의 고민을 해소하고자 해당 서비스 개발","skills":["TypeScript","React.js","expo","tailwindcss","Tanstack Query","zustand"],"role":[{"title":"React Native 기반 iOS 앱 프론트엔드 개발 전반을 담당","content":""},{"title":"Kakao 및 Apple 소셜 로그인 기능 구현 (@react-native-seoul/kakao-login)","content":""},{"title":"온보딩, 룸메이트 찾기, 홈 화면 등 핵심 화면 UI/UX 구성 및 기능 개발","content":""},{"title":"TanStack Query 기반 API 요청 최적화 및 캐싱 전략 설계 (데이터 재사용, 로딩/에러 처리 개선)","content":"회원 프로필 데이터를 가져오는 과정에서 useSuspenseQuery를 사용하여 로딩 상태를 컴포넌트 외부에서 일관성 있게 제어하고, useMutation과 invalidateQueries를 결합하여 사용자 정보 수정 이후 관련 쿼리만 효율적으로 무효화함으로써 최신 서버 상태를 자동으로 반영하도록 구현했습니다. 이를 통해 불필요한 네트워크 요청을 줄이고, 서버 데이터와 클라이언트 UI의 상태 불일치 문제를 해결했으며, 캐시 기반의 구조로 응답 속도 향상과 유지보수성 높은 코드 구조를 만들어냈습니다.","image":"/project/code/cozymate/code.png"},{"title":"Zustand를 활용한 로그인 상태 및 사용자 정보 등의 전역 상태 관리 구조 설계 및 구현","content":""},{"title":"Expo 환경으로의 마이그레이션 및 ESLint, 모듈 설치 이슈 해결을 통한 개발 환경 안정화","content":"기존 React Native CLI 기반 프로젝트를 Expo 환경으로 마이그레이션하면서 발생한 ESLint 설정 충돌, 네이티브 모듈 호환성 문제, 패키지 버전 불일치 등의 이슈를 분석하고 해결하여 개발 환경을 안정화했습니다. Expo의 빠른 빌드 및 디버깅 환경을 적극 활용할 수 있도록 설정을 재정비하고, 불필요한 모듈을 제거하거나 대체 라이브러리로 교체함으로써 의존성 충돌을 최소화했습니다. 또한 ESLint와 Prettier 설정을 Expo 환경에 맞게 통합하여 팀원 간 코드 스타일 일관성을 확보했으며, 이러한 초기 환경 정비를 통해 개발 생산성과 협업 효율을 높였습니다."}],"references":[{"title":"Github","link":"https://github.com/cozy-mate/cozymate-iOS"},{"title":"App Store","link":"https://apps.apple.com/us/app/cozymate-%EB%A3%B8%EB%A9%94%EC%9D%B4%ED%8A%B8-%EB%A7%A4%EC%B9%AD-%EC%84%9C%EB%B9%84%EC%8A%A4/id6657994700"}]}},"staticQueryHashes":[],"slicesMap":{}}